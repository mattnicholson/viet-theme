{# Anything defined in here will be available at the theme level #}
{% set defaultProps = {} %}

{# Anything defined in here will be available at the theme level #}
{% set modifiers = ["default"] %}

{# Optional modifiers to be sent to the wrapper  #}
{% set wrapperModifiers = ["default","alt"] %}

{# Render the component #}
{% macro render(props) %}

  {% set stroke = 1.5 %}
	<div x-data="watchSize" {%if props.listen%}data-listen="true"{%endif%} class="pointer-events-none absolute top-0 left-[-8px] md:left-0 right-[-8px] md:right-0 h-full overflow-hidden">


   <svg :width="width" :height="height" x-data class="-ml-[2px] -mt-[2px]" :viewBox="`0 0 ${width} ${height}`" fill="none" xmlns="http://www.w3.org/2000/svg">
  }
{#  LEFT VERTICAl #}
<path x-data :d="`M34 42L34 ${height - 42}`" stroke="currentColor" stroke-width="{{ stroke }}" stroke-linecap="round"/>
{#  RIGHT VERTICAl #}
<path x-data :d="`M${width - 34} 42L${width - 34} ${height - 42}`"  stroke="currentColor" stroke-width="{{ stroke }}" stroke-linecap="round"/>

{%  if props.eyebrow %}
{#  TOP LEFT PRE-EYEBROW #}
<path x-data :d="`M${width * 0.2} 33L45 33`"  stroke="currentColor" stroke-width="{{ stroke }}" stroke-linecap="round"/>
{#  TOP RIGHT PRE-EYEBROW #}
<path x-data :d="`M${width - 45} 33L${width * 0.8} 33`" stroke="currentColor" stroke-width="{{ stroke }}" stroke-linecap="round"/>
{% else %}
<path x-data :d="`M${width - 45} 33L45 33`"  stroke="currentColor" stroke-width="{{ stroke }}" stroke-linecap="round"/>
{%  endif %}
{#  BOTTOM #}
<path x-data :d="`M${width - 45} ${height - 33}L45 ${height - 33}`" stroke="currentColor" stroke-width="{{ stroke }}" stroke-linecap="round"/>

{# TOP LEFT CORNER #}
<mask x-data :id="`${UID}_mask0_0_1`" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="56" height="56">
<circle cx="27.8022" cy="27.8022" r="26.5522" stroke="white" stroke-width="{{ stroke }}"/>
</mask>
<g x-data :mask="`url(#${UID}_mask0_0_1)`">
<rect x="25.9487" y="25.022" width="47.2637" height="41.7033" fill="currentColor"/>
</g>

{#  TOP RIGHT #}
<g x-effect="xoffset = width-56" x-data={xoffset:0,yoffset:0} :transform="`rotate(90 ${(xoffset + 28)} ${(yoffset + 28)})`">
  <mask x-data :id="`${UID}_top_right`" x-data style="mask-type:alpha" maskUnits="userSpaceOnUse" :x="`${xoffset}`" :y="`${yoffset}`" width="56" height="56">
  <circle x-data :cx="`${(xoffset) + 27.8022}`" :cy="`${(yoffset + 27.8022)}`" r="26.5522" stroke="white" stroke-width="{{ stroke }}"/>
  </mask>
  <g x-data :mask="`url(#${UID}_top_right)`">
  <rect x-data :x="`${(xoffset) + 25.9487}`" :y="`${(yoffset + 25.022)}`" width="47.2637" height="41.7033" fill="currentColor"/>
  </g>
</g>

{#  BOTTOM LEFT #}
<g x-effect="yoffset = height-56" x-data={xoffset:0,yoffset:0} :transform="`rotate(-90 ${(xoffset + 28)} ${(yoffset + 28)})`">
  <mask x-data :id="`${UID}_bottom_left`" x-data style="mask-type:alpha" maskUnits="userSpaceOnUse" :x="`${xoffset}`" :y="`${yoffset}`" width="56" height="56">
  <circle x-data :cx="`${(xoffset) + 27.8022}`" :cy="`${(yoffset + 27.8022)}`" r="26.5522" stroke="white" stroke-width="{{ stroke }}"/>
  </mask>
  <g x-data :mask="`url(#${UID}_bottom_left)`">
  <rect x-data :x="`${(xoffset) + 25.9487}`" :y="`${(yoffset + 25.022)}`" width="47.2637" height="41.7033" fill="currentColor"/>
  </g>
</g>

{#  BOTTOM RIGHT #}
<g x-effect="xoffset = width-56;yoffset = height-56" x-data={xoffset:0,yoffset:0} :transform="`rotate(180 ${(xoffset + 28)} ${(yoffset + 28)})`">
  <mask x-data :id="`${UID}_bottom_right`" x-data style="mask-type:alpha" maskUnits="userSpaceOnUse" :x="`${xoffset}`" :y="`${yoffset}`" width="56" height="56">
  <circle x-data :cx="`${(xoffset) + 27.8022}`" :cy="`${(yoffset + 27.8022)}`" r="26.5522" stroke="white" stroke-width="{{ stroke }}"/>
  </mask>
  <g x-data :mask="`url(#${UID}_bottom_right)`">
  <rect x-data :x="`${(xoffset) + 25.9487}`" :y="`${(yoffset + 25.022)}`" width="47.2637" height="41.7033" fill="currentColor"/>
  </g>
</g>

</svg>

  </div>
{% endmacro %}

{# Optional default wrapper for this component - used for spec sheet #}
{% macro wrapper(props) %}
<div class="magicFrame-wrapper {% if props.modifier %} magicFrame-wrapper--{{props.modifier}} {% endif %} aspect-[16/9] relative">{{ props.content | safe }}</div>
{%  endmacro %}